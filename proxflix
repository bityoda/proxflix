#!/bin/bash

PROG="$(basename $0)"
PROG_DIR="$(readlink -f "$(dirname "${BASH_SOURCE[0]}")")"

typeset -A config
config=(
    [dns]='8.8.8.8,8.8.4.4'
    [iptables]='true'
    [ipv6nat]='true'
)

usage() {
    echo "Usage: $PROG <command>"
    echo
    echo "Commands:"
    echo "  help                            Show this help"
    echo "  start                           Start ProxFlix"
    echo "  stop                            Stop ProxFlix"
    echo "  restart                         Restart ProxFlix"
    echo "  enable                          Enable ProxFlix service (i.e. starts on boot)"
    echo "  disable                         Disable ProxFlix service"
    echo "  status                          Check ProxFlix status"
    echo "  add-ip                          Add allowed IP"
    echo "  rm-ip                           Remove allowed IP"
    echo "  list-ips                        List IPs"
    echo "  config-get [<option>]           Get value of a config option"
    echo "  config-set <option> [<value>]   Set value to a config option"
    echo
    echo "Config options:"
    echo "  dns <ip-list>           DNS servers (default: 8.8.8.8,8.8.4.4)"
    echo "  iptables <true|false>   Set iptables rules (default: true)"
    echo "  ipv6nat <true|false>    Create IPv6 NAT (default: true)"
}

load_config() {
    local line
    local var

    if [[ -f /etc/proxflix/config ]]; then
        while read line; do
            if echo "$line" | grep -qE '^[_a-zA-Z][-_a-zA-Z0-9]+='; then
                var="${line%%=*}"
                config[$var]="${line#*=}"
            fi
        done < /etc/proxflix/config
    fi
}

save_config() {
    local var
    for var in "${!config[@]}"; do
        echo "${var}=${config[$var]}"
    done > /etc/proxflix/config
}

is_true() {
    echo "$1" | grep -qiE '^[[:space:]]*(true|t|yes|y|1)[[:space:]]*$'
}

echo_err() {
    echo "$@" >&2
}

noout() {
    "$@" > /dev/null 2>&1
}

is_running() {
    docker inspect -f '{{.State.Running}}' "$1" 2> /dev/null | grep -qE '^true$'
}

is_container() {
    [[ -n "$(docker inspect -f '{{.State.Running}}' "$1" 2> /dev/null)" ]]
}

is_num() {
    [[ "$1" =~ ^[0-9]+$ ]]
}

is_ipv4() {
    local old_ifs="$IFS"
    local ip="$(echo "$1" | awk -F / '{ print $1 }')"
    local mask="$(echo "$1" | awk -F / '{ print $2 }')"
    local ret=0
    local x

    if [[ -n "$mask" ]]; then
        if ! is_num "$mask" || [[ "$mask" -lt 0 || "$mask" -gt 32 ]]; then
            return 1
        fi
    fi

    IFS='.'
    for x in $ip; do
        if ! is_num "$x" || [[ "$x" -lt 0 || "$x" -gt 255 ]]; then
            ret=1
            break
        fi
    done
    IFS="$old_ifs"

    return $ret
}

is_ipv6() {
    local old_ifs="$IFS"
    local ip="$(echo "$1" | awk -F / '{ print $1 }')"
    local mask="$(echo "$1" | awk -F / '{ print $2 }')"
    local ret=0
    local x

    if [[ -n "$mask" ]]; then
        if ! is_num "$mask" || [[ "$mask" -lt 0 || "$mask" -gt 128 ]]; then
            return 1
        fi
    fi

    IFS=':'
    for x in $ip; do
        if ! echo "$x" | grep -qE '^[a-fA-F0-9]{0,4}$'; then
            ret=1
            break
        fi
    done
    IFS="$old_ifs"

    return $ret
}

ipv6_iface() {
    ip -6 route | grep '^default' | sed 's/.*dev[[:space:]]\+\([^[:space:]]\+\).*/\1/'
}

has_global_ipv6() {
    local x

    for x in $(ipv6_iface); do
        if ip -6 addr show dev "$x" | grep -q 'scope global'; then
            return 0
        fi
    done

    return 1
}

create_systemd_service() {
    local service="[Unit]
After=docker.service
Requires=docker.service

[Service]
ExecStart=$PROG_DIR/proxflix start-container
ExecStop=$PROG_DIR/proxflix stop-container

[Install]
WantedBy=multi-user.target"

    if ! echo "$service" | cmp -s - /etc/systemd/system/proxflix.service; then
        echo "$service" > /etc/systemd/system/proxflix.service
        systemctl daemon-reload
    fi
}

reset_iptables() {
    local chains=$(iptables -w -S | awk '/^-N proxflix/ { print $2 }')
    local x

    for x in $chains; do
        noout iptables -w -F $x
        iptables -w -S | grep -- "-j ${x}\([[:space:]]\|$\)" | tac | \
            awk '{ $1 = "-D"; system("iptables -w "$0) }'
        iptables -w -X $x
    done
}

reset_ip6tables() {
    local chains=$(ip6tables -w -S | awk '/^-N proxflix/ { print $2 }')
    local x

    for x in $chains; do
        noout ip6tables -w -F $x
        ip6tables -w -S | grep -- "-j ${x}\([[:space:]]\|$\)" | tac | \
            awk '{ $1 = "-D"; system("ip6tables -w "$0) }'
        ip6tables -w -X $x
    done
}

prepare_iptables() {
    reset_iptables

    # create chains
    iptables -w -N proxflix-input
    iptables -w -N proxflix-forward
    iptables -w -N proxflix-filter

    iptables -w -I INPUT -j proxflix-input
    iptables -w -I FORWARD -j proxflix-forward
    iptables -w -A proxflix-input -j proxflix-filter
    iptables -w -A proxflix-forward -o proxflix0 -j proxflix-filter

    # block our services for all IPs
    iptables -w -A proxflix-input ! -i lo -p tcp --dport 443 -j REJECT --reject-with tcp-reset
    iptables -w -A proxflix-input ! -i lo -p tcp --dport 80 -j REJECT --reject-with tcp-reset
    iptables -w -A proxflix-input ! -i lo -p tcp --dport 53 -j REJECT --reject-with tcp-reset
    iptables -w -A proxflix-input ! -i lo -p udp --dport 53 -j REJECT --reject-with icmp-port-unreachable

    iptables -w -A proxflix-forward -o proxflix0 -p tcp --dport 443 -j REJECT --reject-with tcp-reset
    iptables -w -A proxflix-forward -o proxflix0 -p tcp --dport 80 -j REJECT --reject-with tcp-reset
    iptables -w -A proxflix-forward -o proxflix0 -p tcp --dport 53 -j REJECT --reject-with tcp-reset
    iptables -w -A proxflix-forward -o proxflix0 -p udp --dport 53 -j REJECT --reject-with icmp-port-unreachable

    # unblock our services for the allowed IPs
    if [[ -f /etc/proxflix/allowed_ips ]]; then
        local x
        for x in $(cat /etc/proxflix/allowed_ips); do
            allow_ip "$x"
        done
    fi
}

prepare_ip6tables() {
    reset_ip6tables

    ip6tables -w -N proxflix-input
    ip6tables -w -N proxflix-forward
    ip6tables -w -N proxflix-filter

    ip6tables -w -I INPUT -j proxflix-input
    ip6tables -w -I FORWARD -j proxflix-forward
    ip6tables -w -A proxflix-input -j proxflix-filter
    ip6tables -w -A proxflix-forward -o proxflix0 -j proxflix-filter

    # block our services for all IPs
    ip6tables -w -A proxflix-input ! -i lo -p tcp --dport 443 -j REJECT --reject-with tcp-reset
    ip6tables -w -A proxflix-input ! -i lo -p tcp --dport 80 -j REJECT --reject-with tcp-reset
    ip6tables -w -A proxflix-input ! -i lo -p tcp --dport 53 -j REJECT --reject-with tcp-reset
    ip6tables -w -A proxflix-input ! -i lo -p udp --dport 53 -j REJECT --reject-with icmp6-adm-prohibited

    ip6tables -w -A proxflix-forward -o proxflix0 -p tcp --dport 443 -j REJECT --reject-with tcp-reset
    ip6tables -w -A proxflix-forward -o proxflix0 -p tcp --dport 80 -j REJECT --reject-with tcp-reset
    ip6tables -w -A proxflix-forward -o proxflix0 -p tcp --dport 53 -j REJECT --reject-with tcp-reset
    ip6tables -w -A proxflix-forward -o proxflix0 -p udp --dport 53 -j REJECT --reject-with icmp6-adm-prohibited

    # unblock our services for the allowed IPs
    if [[ -f /etc/proxflix/allowed_ips ]]; then
        local x
        for x in $(cat /etc/proxflix/allowed_ips); do
            allow_ip "$x"
        done
    fi
}

start_container() {
    local x

    if is_running proxflix; then
        echo_err 'ProxFlix is not already running.'
        return 1
    fi

    noout docker network rm proxflix-net

    # in general IPv6 NAT is not suggested but some VPS providers do not offer
    # configurable IPv6 address range, so we workaround this.
    local ipv6_masq=0
    if is_true "${config[ipv6nat]}" && has_global_ipv6; then
        local net_opts=(--ipv6 --subnet=fd00::/64)
        ip6tables -t nat -I POSTROUTING -s fd00::/64 ! -o proxflix0 -j MASQUERADE
        sysctl -qw net.ipv6.conf.all.forwarding=1
        ipv6_masq=1
    fi

    noout docker network create "${net_opts[@]}" \
        --opt com.docker.network.bridge.name=proxflix0 \
        proxflix-net

    if is_true "${config[iptables]}"; then
        prepare_iptables
        prepare_ip6tables
    fi

    is_container proxflix && docker rm proxflix
    docker run -i --rm -p 53:53 -p 53:53/udp -p 80:80 -p 443:443 \
        --cap-add=NET_ADMIN --name proxflix \
        --net=proxflix-net \
        -e DNS_SERVER="${config[dns]}" \
        bityoda/proxflix

    if is_true "${config[iptables]}"; then
        reset_iptables
        reset_ip6tables
    fi

    if is_true "$ipv6_masq"; then
        while noout ip6tables -t nat -D POSTROUTING -s fd00::/64 ! -o proxflix0 -j MASQUERADE; do
            true
        done
    fi
}

stop_container() {
    is_running proxflix || return 1
    docker stop proxflix
}

start() {
    if is_running proxflix; then
        echo_err 'ProxFlix is not already running.'
        return 1
    fi

    create_systemd_service
    systemctl start proxflix
}

stop() {
    systemctl stop proxflix
}

enable() {
    create_systemd_service
    systemctl enable proxflix
}

disable() {
    systemctl disable proxflix
}

status() {
    local boot=no
    local running=no

    [[ "$(systemctl is-enabled proxflix 2> /dev/null)" == "enabled" ]] && boot=yes
    is_running proxflix && running=yes

    echo "Start on boot: $boot"
    echo "Running: $running"
}

get_allowed_ips() {
    iptables -w -S proxflix-filter | grep -- "-j ACCEPT\([[:space:]]\|$\)" | \
        awk '{ sub("/32", "", $4); print $4 }' | sort | uniq
    ip6tables -w -S proxflix-filter | grep -- "-j ACCEPT\([[:space:]]\|$\)" | \
        awk '{ sub("/128", "", $4); print $4 }' | sort | uniq
    return 0
}

update_allowed_ips_file() {
    get_allowed_ips > /etc/proxflix/allowed_ips
}

allow_ip() {
    disallow_ip "$1" || return 1

    if is_ipv4 "$1"; then
        iptables -w -A proxflix-filter -s "$1" -j ACCEPT && return 0
    elif is_ipv6 "$1"; then
        ip6tables -w -A proxflix-filter -s "$1" -j ACCEPT && return 0
    fi

    return 1
}

disallow_ip() {
    if is_ipv4 "$1"; then
        while noout iptables -w -D proxflix-filter -s "$1" -j ACCEPT; do
            true
        done
        return 0
    elif is_ipv6 "$1"; then
        while noout ip6tables -w -D proxflix-filter -s "$1" -j ACCEPT; do
            true
        done
        return 0
    fi
    return 1

}

add_ip() {
    if ! is_running proxflix; then
        echo_err 'ProxFlix is not running.'
        return 1
    fi

    if ! is_true "${config[iptables]}"; then
        echo_err "This command is disabled because you have iptables config option as false."
        return 1
    fi

    allow_ip "$1" && update_allowed_ips_file
    return 0
}

rm_ip() {
    if ! is_running proxflix; then
        echo_err 'ProxFlix is not running.'
        return 1
    fi

    if ! is_true "${config[iptables]}"; then
        echo_err "This command is disabled because you have iptables config option as false."
        return 1
    fi

    disallow_ip "$1" && update_allowed_ips_file
    return 0
}

list_ips() {
    if ! is_running proxflix; then
        echo_err 'ProxFlix is not running.'
        return 1
    fi

    if ! is_true "${config[iptables]}"; then
        echo_err "This command is disabled because you have iptables config option as false."
        return 1
    fi

    get_allowed_ips
}

config_get() {
    local var="$1"
    shift

    if [[ -z "$var" ]]; then
        for var in "${!config[@]}"; do
            echo "${var}=${config[$var]}"
        done
    else
        echo "${config[$var]}"
    fi
    return 0
}

config_set() {
    local var="$1"
    shift
    if [[ -z "$@" ]]; then
        unset -v 'config[$var]'
    else
        config[$var]="$@"
    fi
    save_config
}

if [[ -z "$1" || "$1" == "help" ]]; then
    usage
    exit 0
fi

if [[ $(id -u) -ne 0 ]]; then
    echo_err "You must run it as root."
    exit 1
fi

mkdir -p /etc/proxflix
load_config

case "$1" in
    start-container)
        start_container
        ;;
    stop-container)
        stop_container
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    enable)
        enable
        ;;
    disable)
        disable
        ;;
    status)
        status
        ;;
    add-ip)
        shift
        add_ip "$@"
        ;;
    rm-ip)
        shift
        rm_ip "$@"
        ;;
    list-ips)
        list_ips
        ;;
    config-get)
        shift
        config_get "$@"
        ;;
    config-set)
        shift
        config_set "$@"
        ;;
    *)
        [[ -n "$1" ]] && echo_err "Invalid command: $1"
        echo_err "For usage run: $0 help"
        exit 1
        ;;
esac

exit $?
